---

- name: Get upstream APT GPG key
  apt_key:
    id: '{{ docker__upstream_key }}'
    keyserver: '{{ ansible_local.core.keyserver
                   if (ansible_local|d() and ansible_local.core|d() and
                       ansible_local.core.keyserver)
                   else "hkp://pool.sks-keyservers.net" }}'
    state: 'present'
  when: docker__upstream|d() | bool

- name: Configure upstream APT repository
  apt_repository:
    repo: '{{ docker__upstream_repository }}'
    state: 'present'
    update_cache: True
  when: docker__upstream|d() | bool

- name: Remove other version if upstream is modified
  apt:
    name: '{{ item }}'
    state: 'absent'
    install_recommends: False
  register: docker__register_other_version_removed
  with_flattened:
    - '{{ "docker.io" if docker__upstream|d() else "docker-engine" }}'

- name: Remove custom systemd startup file if present
  file:
    path: '/etc/systemd/system/docker.service'
    state: 'absent'
  tags: [ 'role::docker:config' ]
  when: (ansible_service_mgr == 'systemd' and 
         docker__register_other_version_removed|changed)

- name: Install required packages
  apt:
    name: '{{ item }}'
    state: 'present'
    install_recommends: False
  with_flattened:
    - '{{ ("docker-engine" if docker__upstream|d() else "docker.io") ~ (("=" ~ docker__version) if docker__version|d() else "") }}'
    - '{{ docker__base_packages }}'
    - '{{ docker__packages }}'

- name: Install ferment generator
  pip:
    name: '{{ docker__ferment_pip_package }}'
    state: 'present'
  when: docker__ferment|d() | bool

- name: Install ferment wrapper script
  template:
    src: 'usr/local/lib/docker-ferment-wrapper.j2'
    dest: '{{ docker__ferment_wrapper }}'
    owner: 'root'
    group: 'root'
    mode: '0755'
  when: docker__ferment|d() | bool

- name: Install ferm post hook
  copy:
    src: 'etc/ferm/hooks/post.d/restart-docker'
    dest: '/etc/ferm/hooks/post.d/restart-docker'
    owner: 'root'
    group: 'root'
    mode: '0755'
  when: docker__ferm_post_hook|bool

- name: Check Docker version
  environment:
    LC_MESSAGES: 'C'
  shell: dpkg-query -W -f='${Version}\n' '{{ ("docker-engine" if docker__upstream|d() else "docker.io") }}' | cut -d- -f1
  register: docker__register_version
  changed_when: False
  failed_when: False
  tags: [ 'role::docker:config' ]

- name: Configure Docker options
  template:
    src: 'etc/default/docker.j2'
    dest: '/etc/default/docker'
    owner: 'root'
    group: 'root'
    mode: '0644'
  notify: [ 'Restart docker' ]
  tags: [ 'role::docker:config' ]
  when: (ansible_service_mgr != 'systemd' or docker__register_version.stdout | version_compare('1.10', '<'))

- name: Remove Upstart docker configuration file
  file:
    path: '/etc/default/docker'
    state: 'absent'
  tags: [ 'role::docker:config' ]
  when: (ansible_service_mgr == 'systemd' and docker__register_version.stdout | version_compare('1.10', '>=')) 

- name: Configure Docker systemd options
  template:
    src: 'etc/docker/daemon.json.j2'
    dest: '/etc/docker/daemon.json'
    owner: 'root'
    group: 'root'
    mode: '0644'
  notify: [ 'Restart docker' ]
  tags: [ 'role::docker:config' ]
  when: (ansible_service_mgr == 'systemd' and docker__register_version.stdout | version_compare('1.10', '>='))

- name: Remove systemd docker configuration file
  file:
    path: '/etc/docker/daemon.json'
    state: 'absent'
  tags: [ 'role::docker:config' ]
  when: (ansible_service_mgr != 'systemd' or docker__register_version.stdout | version_compare('1.10', '<')) 

- name: Make sure that systemd directory exists
  file:
    path: '/etc/systemd/system'
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: '0755'
  when: ansible_service_mgr == 'systemd'
  tags: [ 'role::docker:config' ]

- name: Make sure that docker.service.d directory exists
  file:
    path: '/etc/systemd/system/docker.service.d'
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: '0755'
  when: (ansible_service_mgr == 'systemd' and 
        (docker__env_http_proxy is defined or docker__env_https_proxy is defined))
  tags: [ 'role::docker:config' ]

- name: Install Debian systemd service unit
  template:
    src: 'etc/systemd/system/docker.service.j2'
    dest: '/etc/systemd/system/docker.service'
    owner: 'root'
    group: 'root'
    mode: '0644'
  register: docker__register_systemd_service
  when: ansible_service_mgr == 'systemd'
  tags: [ 'role::docker:config' ]

- name: Configure Docker proxy
  template:
    src: 'etc/systemd/system/docker.service.d/http-proxy.conf.j2'
    dest: '/etc/systemd/system/docker.service.d/http-proxy.conf'
    owner: 'root'
    group: 'root'
    mode: '0644'
  register: docker__register_systemd_proxy_present
  when: (ansible_service_mgr == 'systemd' and 
        (docker__env_http_proxy is defined or docker__env_https_proxy is defined))
  tags: [ 'role::docker:config' ]

- name: Remove Docker proxy configuration
  file:  path='/etc/systemd/system/docker.service.d/http-proxy.conf' state=absent
  register: docker__register_systemd_proxy_absent
  when: (ansible_service_mgr == 'systemd' and not
        (docker__env_http_proxy is defined or docker__env_https_proxy is defined))
  tags: [ 'role::docker:config' ]

- name: Reload systemd daemons
  command: systemctl daemon-reload
  notify: [ 'Restart docker']
  when: (ansible_service_mgr == 'systemd' and
         ((docker__register_systemd_service|d() and
         docker__register_systemd_service|changed) or
         (docker__register_systemd_proxy_present|d() and
         docker__register_systemd_proxy_present|changed) or
         (docker__register_systemd_proxy_absent|d() and
         docker__register_systemd_proxy_absent|changed)))
  tags: [ 'role::docker:config' ]

- name: Add specified users to 'docker' group
  user:
    name: '{{ item }}'
    groups: 'docker'
    append: True
  with_items: '{{ docker__admins }}'
  when: item|d()
  tags: [ 'role::docker:config', 'role::docker:admins' ]

