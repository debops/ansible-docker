---
# .. vim: foldmarker=[[[,]]]:foldmethod=marker

# debops.docker default variables [[[
# ===================================

# .. contents:: Sections
#    :local:


# Docker packages and installation [[[
# ------------------------------------

# .. envvar:: docker__upstream [[[
#
# By default ``debops.docker`` installs Docker from the system distribution
# repositories. Here you can enable upstream repositories and install the
# upstream version of Docker.
docker__upstream: False

                                                                   # ]]]
# .. envvar:: docker__upstream_key [[[
#
# APT GPG key id used to sign the upstream Docker packages.
docker__upstream_key: '58118E89F3A912897C070ADBF76221572C52609D'

                                                                   # ]]]
# .. envvar:: docker__upstream_repository [[[
#
# Address of the Docker upstream APT repository.
docker__upstream_repository: 'deb https://apt.dockerproject.org/repo {{ ansible_distribution | lower }}-{{ ansible_distribution_release }} main'

                                                                   # ]]]
# .. envvar:: docker__base_packages [[[
#
# List of base packages to install with Docker.
docker__base_packages: [ 'aufs-tools', 'python-docker', 'python-setuptools' ]

                                                                   # ]]]
# .. envvar:: docker__packages [[[
#
# List of additional packages to install with Docker.
docker__packages: []

                                                                   # ]]]
# .. envvar:: docker__admins [[[
#
# List of UNIX accounts which should be added to ``docker`` system group which
# has access to the Docker UNIX socket.
docker__admins: [ '{{ (ansible_ssh_user
                       if (ansible_ssh_user | d() and
                           ansible_ssh_user != "root")
                       else lookup("env", "USER")) }}' ]
                                                                   # ]]]
                                                                   # ]]]
# Network configuration [[[
# -------------------------

# .. envvar:: docker__bridge [[[
#
# Name of the bridge to use instead of the autogenerated ``docker0`` bridge.
docker__bridge: ''

                                                                   # ]]]
# .. envvar:: docker__fixed_cidr [[[
#
# Fixed subnet in CIDR format to confine dynamically allocated IP addresses.
# Should be included in the IP address range set on the bridge.
docker__fixed_cidr: ''

                                                                   # ]]]
# .. envvar:: docker__dns_nameserver [[[
#
# List of IP addresses of nameservers used by Docker. By default they
# are gathered by the ``debops.core`` role from the :file:`/etc/resolv.conf` file of
# the remote host.
docker__dns_nameserver: '{{ ansible_local.resolver.nameserver
                            if (ansible_local|d() and ansible_local.resolver|d() and
                                ansible_local.resolver.nameserver|d())
                            else [] }}'

                                                                   # ]]]
# .. envvar:: docker__dns_search [[[
#
# List of DNS search domains to use by Docker. By default they are gathered by
# the ``debops.core`` role from the :file:`/etc/resolv.conf` file of the remote host.
docker__dns_search: '{{ ansible_local.resolver.search
                        if (ansible_local|d() and ansible_local.resolver|d() and
                            ansible_local.resolver.search|d())
                        else [] }}'
                                                                   # ]]]
                                                                   # ]]]
# Remote Docker connection (TCP) [[[
# ----------------------------------

# .. envvar:: docker__tcp [[[
#
# Enable or disable listening for TLS connections on the TCP docker port. By
# default remote connections are enabled if the ``debops.pki`` role has been
# configured on remote host (access is controlled by the firewall).
docker__tcp: '{{ docker__pki | bool }}'

                                                                   # ]]]
# .. envvar:: docker__tcp_bind [[[
#
# IP address of the interface to listen on for incoming connections (all
# interfaces by default).
docker__tcp_bind: '0.0.0.0'

                                                                   # ]]]
# .. envvar:: docker__tcp_port [[[
#
# Port on which to listen for incoming TLS connections.
docker__tcp_port: '2375'

                                                                   # ]]]
# .. envvar:: docker__tcp_allow [[[
#
# List of IP addresses or subnets in CIDR format which are allowed to connect
# to the Docker daemon over TLS. If it's not specified, remote connections are
# denied by the firewall.
docker__tcp_allow: []

                                                                   # ]]]
# .. envvar:: docker__tcp_listen [[[
#
# Default connection configured in addition to local socket connection, using
# TCP over TLS.
docker__tcp_listen: '{{ ("tcp://" + docker__tcp_bind + ":" + docker__tcp_port)
                         if (docker__tcp|d() | bool) else "" }}'

                                                                   # ]]]
# .. envvar:: docker__custom_ports [[[
#
# List of additional TCP/UDP ports to allow in the firewall, useful for other
# Docker-related services, like Swarm, Consul.
docker__custom_ports: []
                                                                   # ]]]
                                                                   # ]]]
# Docker configuration options [[[
# --------------------------------

# .. envvar:: docker__listen [[[
#
# List of host connections configured in the Docker daemon (``--host`` parameter).
docker__listen: [ '{{ docker__tcp_listen }}' ]

                                                                   # ]]]
# .. envvar:: docker__labels [[[
#
# Dictionary with labels configured on the Docker daemon, each key is the label
# name and value is the label attribute. Examples:
#
# .. code-block:: yaml
#    :linenos:
#
#    docker__labels:
#      'com.example.environment': 'production'
#      'com.example.storage':     'extfs'
#
docker__labels: {}

                                                                   # ]]]
# .. envvar:: docker__options [[[
#
# List of additional options passed to ``docker`` daemon. Examples:
#
# .. code-block:: yaml
#    :linenos:
#
#    docker__options:
#      - '--icc=false'
#      - '--debug=true'
#
docker__options: []
                                                                   # ]]]
                                                                   # ]]]
# .. envvar:: docker__registry_mirrors [[[
#
# List of registry mirrors.
docker__registry_mirrors: []
                                                                   # ]]]
                                                                   # ]]]
# .. envvar:: docker__insecure_registries [[[
#
# List of insecure registries.
docker__insecure_registries: []
                                                                   # ]]]
                                                                   # ]]]
# PKI and certificates [[[
# ------------------------

# .. envvar:: docker__pki [[[
#
# Enable or disable support for PKI certificates managed by ``debops.pki``.
docker__pki: '{{ (True
                  if (ansible_local|d() and ansible_local.pki|d() and
                      ansible_local.pki.enabled|d() | bool)
                  else False) | bool }}'

                                                                   # ]]]
# .. envvar:: docker__pki_path [[[
#
# Directory where PKI files are located on the remote host.
docker__pki_path: '{{ ansible_local.pki.base_path
                      if (ansible_local|d() and ansible_local.pki|d() and
                          ansible_local.pki.base_path|d())
                      else "/etc/pki" }}'

                                                                   # ]]]
# .. envvar:: docker__pki_realm [[[
#
# Name of the PKI realm used by Docker.
docker__pki_realm: '{{ ansible_local.pki.realm
                       if (ansible_local|d() and ansible_local.pki|d() and
                           ansible_local.pki.realm|d())
                       else "system" }}'

                                                                   # ]]]
# .. envvar:: docker__pki_ca [[[
#
# Name of the Root CA certificate file used by Docker.
docker__pki_ca: 'CA.crt'

                                                                   # ]]]
# .. envvar:: docker__pki_crt [[[
#
# Name of the host certificate used by Docker.
docker__pki_crt: 'default.crt'

                                                                   # ]]]
# .. envvar:: docker__pki_key [[[
#
# Name of the private key file used by Docker.
docker__pki_key: 'default.key'
                                                                   # ]]]
                                                                   # ]]]
# Firewall and ferment support [[[
# --------------------------------

# .. envvar:: docker__ferment [[[
#
# Enable or disable support for :program:`ferment` script, which can generate ``ferm``
# configuration with the current Docker state.
docker__ferment: True

                                                                   # ]]]
# .. envvar:: docker__ferment_wrapper [[[
#
# Path to the :program:`ferment` wrapper script used to generate ``ferm`` configuration.
docker__ferment_wrapper: '{{ (ansible_local.root.lib
                              if (ansible_local|d() and ansible_local.root|d() and
                                  ansible_local.root.lib|d())
                              else "/usr/local/lib") + "/docker-ferment-wrapper" }}'
                                                                   # ]]]
                                                                   # ]]]
# Configuration of other Ansible roles [[[
# ----------------------------------------

# .. envvar:: docker__etc_services__dependent_list [[[
#
# Configuration for ``debops.etc_services`` role which registers port numbers
# for Docker REST API.
docker__etc_services__dependent_list:

  - name: 'docker'
    port: '2375'
    comment: 'Docker REST API (plain text)'

  - name: 'docker-s'
    port: '2376'
    comment: 'Docker REST API (SSL)'

                                                                   # ]]]
# .. envvar:: docker__ferm__dependent_rules [[[
#
# Configuration for ``debops.ferm`` role which enables support for :program:`ferment`
# script and opens access to the Docker REST API in the firewall.
docker__ferm__dependent_rules:

  - type: 'custom'
    weight: '99'
    role: 'docker'
    name: 'ferment_rules'
    rules: |
      @def $DOCKER_FERMENT = `test -x {{ docker__ferment_wrapper }} && echo 1 || echo 0`;
      @if $DOCKER_FERMENT {
          @include '{{ docker__ferment_wrapper + (" " + docker__bridge if docker__bridge else "") }}|';
      }

  - type: 'accept'
    dport: '{{ [ docker__tcp_port ] + docker__custom_ports }}'
    protocol: [ 'tcp', 'udp' ]
    saddr: '{{ docker__tcp_allow }}'
    accept_any: False
    weight: '50'
    role: 'docker'
    name: 'service_rules'
                                                                   # ]]]
                                                                   # ]]]
                                                                   # ]]]
